/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import fta_domain_model.Attacker;
import fta_domain_model.Bracket;
import fta_domain_model.Defender;
import fta_domain_model.ExtraTime;
import fta_domain_model.Fta_domain_modelPackage;
import fta_domain_model.Goalkeeper;
import fta_domain_model.GroupStage;
import fta_domain_model.Knockout;
import fta_domain_model.League;
import fta_domain_model.Match;
import fta_domain_model.PenaltyShootout;
import fta_domain_model.Player;
import fta_domain_model.RoundRobin;
import fta_domain_model.Standard;
import fta_domain_model.Team;
import fta_domain_model.Tournament;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Fta_domain_modelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Fta_domain_modelPackage.ATTACKER:
				sequence_Attacker(context, (Attacker) semanticObject); 
				return; 
			case Fta_domain_modelPackage.BRACKET:
				sequence_Bracket(context, (Bracket) semanticObject); 
				return; 
			case Fta_domain_modelPackage.DEFENDER:
				sequence_Defender(context, (Defender) semanticObject); 
				return; 
			case Fta_domain_modelPackage.EXTRA_TIME:
				sequence_ExtraTime(context, (ExtraTime) semanticObject); 
				return; 
			case Fta_domain_modelPackage.GOALKEEPER:
				sequence_Goalkeeper(context, (Goalkeeper) semanticObject); 
				return; 
			case Fta_domain_modelPackage.GROUP_STAGE:
				sequence_GroupStage(context, (GroupStage) semanticObject); 
				return; 
			case Fta_domain_modelPackage.KNOCKOUT:
				sequence_Knockout(context, (Knockout) semanticObject); 
				return; 
			case Fta_domain_modelPackage.LEAGUE:
				sequence_League(context, (League) semanticObject); 
				return; 
			case Fta_domain_modelPackage.MATCH:
				sequence_Match(context, (Match) semanticObject); 
				return; 
			case Fta_domain_modelPackage.PENALTY_SHOOTOUT:
				sequence_PenaltyShootout(context, (PenaltyShootout) semanticObject); 
				return; 
			case Fta_domain_modelPackage.PLAYER:
				sequence_Player(context, (Player) semanticObject); 
				return; 
			case Fta_domain_modelPackage.ROUND_ROBIN:
				sequence_RoundRobin(context, (RoundRobin) semanticObject); 
				return; 
			case Fta_domain_modelPackage.STANDARD:
				sequence_Standard(context, (Standard) semanticObject); 
				return; 
			case Fta_domain_modelPackage.TEAM:
				sequence_Team(context, (Team) semanticObject); 
				return; 
			case Fta_domain_modelPackage.TOURNAMENT:
				sequence_Tournament(context, (Tournament) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlayerStatistics returns Attacker
	 *     Attacker returns Attacker
	 *
	 * Constraint:
	 *     (
	 *         goals=EInt? 
	 *         assists=EInt? 
	 *         fouls=EInt? 
	 *         yellowCards=EInt? 
	 *         redCards=EInt? 
	 *         sprintSpeed=EInt?
	 *     )
	 * </pre>
	 */
	protected void sequence_Attacker(ISerializationContext context, Attacker semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Bracket returns Bracket
	 *
	 * Constraint:
	 *     (rounds=EInt? bracketSide=BracketSide matches+=Match matches+=Match*)
	 * </pre>
	 */
	protected void sequence_Bracket(ISerializationContext context, Bracket semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlayerStatistics returns Defender
	 *     Defender returns Defender
	 *
	 * Constraint:
	 *     (
	 *         goals=EInt? 
	 *         assists=EInt? 
	 *         fouls=EInt? 
	 *         yellowCards=EInt? 
	 *         redCards=EInt? 
	 *         cleansheets=EInt?
	 *     )
	 * </pre>
	 */
	protected void sequence_Defender(ISerializationContext context, Defender semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MatchRules returns ExtraTime
	 *     ExtraTime returns ExtraTime
	 *
	 * Constraint:
	 *     (extraTime=EBoolean? extraTimeDuration=EInt?)
	 * </pre>
	 */
	protected void sequence_ExtraTime(ISerializationContext context, ExtraTime semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlayerStatistics returns Goalkeeper
	 *     Goalkeeper returns Goalkeeper
	 *
	 * Constraint:
	 *     (
	 *         goals=EInt? 
	 *         assists=EInt? 
	 *         fouls=EInt? 
	 *         yellowCards=EInt? 
	 *         redCards=EInt? 
	 *         cleansheets=EInt? 
	 *         saves=EInt?
	 *     )
	 * </pre>
	 */
	protected void sequence_Goalkeeper(ISerializationContext context, Goalkeeper semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MatchRules returns GroupStage
	 *     GroupStage returns GroupStage
	 *
	 * Constraint:
	 *     tieBreaking=EBoolean?
	 * </pre>
	 */
	protected void sequence_GroupStage(ISerializationContext context, GroupStage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TournamentFormat returns Knockout
	 *     Knockout returns Knockout
	 *
	 * Constraint:
	 *     (
	 *         hasThirdPlacePlayoff?='hasThirdPlacePlayoff'? 
	 *         name=EString 
	 *         maxTeams=EInt 
	 *         minTeams=EInt 
	 *         description=EString? 
	 *         numberOfRounds=EInt?
	 *     )
	 * </pre>
	 */
	protected void sequence_Knockout(ISerializationContext context, Knockout semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TournamentFormat returns League
	 *     League returns League
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         maxTeams=EInt 
	 *         minTeams=EInt 
	 *         description=EString? 
	 *         numberOfRounds=EInt? 
	 *         finalsFormat=FinalsFormat?
	 *     )
	 * </pre>
	 */
	protected void sequence_League(ISerializationContext context, League semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Match returns Match
	 *
	 * Constraint:
	 *     (
	 *         scoreTeam1=EInt? 
	 *         scoreTeam2=EInt? 
	 *         matchResult=MatchResult? 
	 *         day=EDate 
	 *         teams+=[Team|EString] 
	 *         teams+=[Team|EString]* 
	 *         matchrules=MatchRules
	 *     )
	 * </pre>
	 */
	protected void sequence_Match(ISerializationContext context, Match semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MatchRules returns PenaltyShootout
	 *     PenaltyShootout returns PenaltyShootout
	 *
	 * Constraint:
	 *     penaltyShootouts=EBoolean?
	 * </pre>
	 */
	protected void sequence_PenaltyShootout(ISerializationContext context, PenaltyShootout semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Player returns Player
	 *
	 * Constraint:
	 *     (name=EString position=PlayerPosition birthDate=EDate? number=EInt playerstatistics=PlayerStatistics)
	 * </pre>
	 */
	protected void sequence_Player(ISerializationContext context, Player semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TournamentFormat returns RoundRobin
	 *     RoundRobin returns RoundRobin
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         maxTeams=EInt 
	 *         minTeams=EInt 
	 *         description=EString? 
	 *         pointsForWin=EInt 
	 *         pointsForDraw=EInt 
	 *         pointsForLoss=EInt 
	 *         numberOfRounds=EInt 
	 *         tieBreakerRule=TieBreakerRule?
	 *     )
	 * </pre>
	 */
	protected void sequence_RoundRobin(ISerializationContext context, RoundRobin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MatchRules returns Standard
	 *     Standard returns Standard
	 *
	 * Constraint:
	 *     (tieBreaking?='tieBreaking'? extraTime?='extraTime'? penaltyShootouts?='penaltyShootouts'?)
	 * </pre>
	 */
	protected void sequence_Standard(ISerializationContext context, Standard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Team returns Team
	 *
	 * Constraint:
	 *     (name=EString teamSize=EInt? managerName=EString? players+=Player players+=Player*)
	 * </pre>
	 */
	protected void sequence_Team(ISerializationContext context, Team semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tournament returns Tournament
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         tournamentType=TournamentType? 
	 *         (teams+=Team teams+=Team*)? 
	 *         tournamentformat=TournamentFormat 
	 *         brackets+=Bracket 
	 *         brackets+=Bracket*
	 *     )
	 * </pre>
	 */
	protected void sequence_Tournament(ISerializationContext context, Tournament semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
