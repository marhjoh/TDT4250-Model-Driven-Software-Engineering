// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/fta_domain_model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Tournament returns Tournament:
	'Tournament'
	name=EString
	'{'
		('tournamentType' tournamentType=TournamentType)?
		('teams' '{' teams+=Team ( "," teams+=Team)* '}' )?
		'tournamentformat' tournamentformat=TournamentFormat
		'brackets' '{' brackets+=Bracket ( "," brackets+=Bracket)* '}' 
	'}';


TournamentFormat returns TournamentFormat:
	League | RoundRobin | Knockout;




PlayerStatistics returns PlayerStatistics:
	Defender | Goalkeeper | Attacker;

MatchRules returns MatchRules:
	Standard | ExtraTime | PenaltyShootout | GroupStage;

EString returns ecore::EString:
	STRING | ID;

enum TournamentType returns TournamentType:
				KNOCKOUT = 'KNOCKOUT' | LEAGUE = 'LEAGUE' | ROUND_ROBIN = 'ROUND_ROBIN';

Team returns Team:
	'Team'
	name=EString
	'{'
		('teamSize' teamSize=EInt)?
		('managerName' managerName=EString)?
		'players' '{' players+=Player ( "," players+=Player)* '}' 
	'}';

Bracket returns Bracket:
	'Bracket'
	'{'
		('rounds' rounds=EInt)?
		('bracketSide' bracketSide=BracketSide)
		'matches' '{' matches+=Match ( "," matches+=Match)* '}' 
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Player returns Player:
	'Player'
	name=EString
	'{'
		('position' position=PlayerPosition)
		('birthDate' birthDate=EDate)?
		('number' number=EInt)
		'playerstatistics' playerstatistics=PlayerStatistics
	'}';

enum PlayerPosition returns PlayerPosition:
				GOALKEEPER = 'GOALKEEPER' | DEFENDER = 'DEFENDER' | MIDFIELDER = 'MIDFIELDER' | ATTACKER = 'ATTACKER';

EDate returns ecore::EDate:
    DATE;

terminal DATE:
    '0'..'9''0'..'9''0'..'9''0'..'9' '-' '0'..'9''0'..'9' '-' '0'..'9''0'..'9';

Defender returns Defender:
	{Defender}
	'Defender'
	'{'
		('goals' goals=EInt)?
		('assists' assists=EInt)?
		('fouls' fouls=EInt)?
		('yellowCards' yellowCards=EInt)?
		('redCards' redCards=EInt)?
		('cleansheets' cleansheets=EInt)?
	'}';

Goalkeeper returns Goalkeeper:
	{Goalkeeper}
	'Goalkeeper'
	'{'
		('goals' goals=EInt)?
		('assists' assists=EInt)?
		('fouls' fouls=EInt)?
		('yellowCards' yellowCards=EInt)?
		('redCards' redCards=EInt)?
		('cleansheets' cleansheets=EInt)?
		('saves' saves=EInt)?
	'}';

Attacker returns Attacker:
	{Attacker}
	'Attacker'
	'{'
		('goals' goals=EInt)?
		('assists' assists=EInt)?
		('fouls' fouls=EInt)?
		('yellowCards' yellowCards=EInt)?
		('redCards' redCards=EInt)?
		('sprintSpeed' sprintSpeed=EInt)?
	'}';

League returns League:
	{League}
	'League'
	name=EString
	'{'
		('maxTeams' maxTeams=EInt)
		('minTeams' minTeams=EInt)
		('description' description=EString)?
		('numberOfRounds' numberOfRounds=EInt)?
		('finalsFormat' finalsFormat=FinalsFormat)?
	'}';

RoundRobin returns RoundRobin:
	{RoundRobin}
	'RoundRobin'
	name=EString
	'{'
		('maxTeams' maxTeams=EInt)
		('minTeams' minTeams=EInt)
		('description' description=EString)?
		('pointsForWin' pointsForWin=EInt)
		('pointsForDraw' pointsForDraw=EInt)
		('pointsForLoss' pointsForLoss=EInt)
		('numberOfRounds' numberOfRounds=EInt)
		('tieBreakerRule' tieBreakerRule=TieBreakerRule)?
	'}';

Knockout returns Knockout:
	{Knockout}
	(hasThirdPlacePlayoff?='hasThirdPlacePlayoff')?
	'Knockout'
	name=EString
	'{'
		('maxTeams' maxTeams=EInt)
		('minTeams' minTeams=EInt)
		('description' description=EString)?
		('numberOfRounds' numberOfRounds=EInt)?
	'}';

enum FinalsFormat returns FinalsFormat:
				SINGLE_FINAL = 'SINGLE_FINAL' | BEST_OF_THREE = 'BEST_OF_THREE';

enum TieBreakerRule returns TieBreakerRule:
				GOAL_DIFFERENCE = 'GOAL_DIFFERENCE' | HEAD_TO_HEAD = 'HEAD_TO_HEAD' | GOALS_SCORED = 'GOALS_SCORED';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum BracketSide returns BracketSide:
				UPPER = 'UPPER' | LOWER = 'LOWER';

Match returns Match:
	'Match'
	'{'
		('scoreTeam1' scoreTeam1=EInt)?
		('scoreTeam2' scoreTeam2=EInt)?
		('matchResult' matchResult=MatchResult)?
		('day' day=EDate)
		'teams' '(' teams+=[Team|EString] ( "," teams+=[Team|EString])* ')' 
		'matchrules' matchrules=MatchRules
	'}';

enum MatchResult returns MatchResult:
				WIN = 'WIN' | LOSS = 'LOSS' | DRAW = 'DRAW';

Standard returns Standard:
	{Standard}
	(tieBreaking?='tieBreaking')?
	(extraTime?='extraTime')?
	(penaltyShootouts?='penaltyShootouts')?
	'Standard'
	;

ExtraTime returns ExtraTime:
	{ExtraTime}
	'ExtraTime'
	'{'
		('extraTime' extraTime = EBoolean)?
		('extraTimeDuration' extraTimeDuration=EInt)?
	'}';

PenaltyShootout returns PenaltyShootout:
	{PenaltyShootout}
	'PenaltyShootout'
	'{'
		('penaltyShootouts' penaltyShootouts = EBoolean)?
	'}';

GroupStage returns GroupStage:
	{GroupStage}
	'GroupStage'
	'{'
		('tieBreaking' tieBreaking=EBoolean)?
	'}';
