/**
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import fta_domain_model.Bracket;
import fta_domain_model.Player;
import fta_domain_model.Team;
import fta_domain_model.Tournament;
import fta_domain_model.TournamentFormat;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final Tournament tournament, @Extension final IFormattableDocument document) {
    EList<Team> _teams = tournament.getTeams();
    for (final Team team : _teams) {
      document.<Team>format(team);
    }
    document.<TournamentFormat>format(tournament.getTournamentformat());
    EList<Bracket> _brackets = tournament.getBrackets();
    for (final Bracket bracket : _brackets) {
      document.<Bracket>format(bracket);
    }
  }

  protected void _format(final Team team, @Extension final IFormattableDocument document) {
    EList<Player> _players = team.getPlayers();
    for (final Player player : _players) {
      document.<Player>format(player);
    }
  }

  @XbaseGenerated
  public void format(final Object team, final IFormattableDocument document) {
    if (team instanceof XtextResource) {
      _format((XtextResource)team, document);
      return;
    } else if (team instanceof Team) {
      _format((Team)team, document);
      return;
    } else if (team instanceof Tournament) {
      _format((Tournament)team, document);
      return;
    } else if (team instanceof EObject) {
      _format((EObject)team, document);
      return;
    } else if (team == null) {
      _format((Void)null, document);
      return;
    } else if (team != null) {
      _format(team, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(team, document).toString());
    }
  }
}
