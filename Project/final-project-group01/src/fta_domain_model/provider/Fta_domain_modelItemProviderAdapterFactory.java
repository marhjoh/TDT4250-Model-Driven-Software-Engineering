/**
 */
package fta_domain_model.provider;

import fta_domain_model.util.Fta_domain_modelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Fta_domain_modelItemProviderAdapterFactory extends Fta_domain_modelAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Fta_domain_modelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Team} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TeamItemProvider teamItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Team}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTeamAdapter() {
		if (teamItemProvider == null) {
			teamItemProvider = new TeamItemProvider(this);
		}

		return teamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Tournament} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TournamentItemProvider tournamentItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Tournament}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTournamentAdapter() {
		if (tournamentItemProvider == null) {
			tournamentItemProvider = new TournamentItemProvider(this);
		}

		return tournamentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Match} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchItemProvider matchItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Match}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchAdapter() {
		if (matchItemProvider == null) {
			matchItemProvider = new MatchItemProvider(this);
		}

		return matchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Player} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayerItemProvider playerItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Player}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayerAdapter() {
		if (playerItemProvider == null) {
			playerItemProvider = new PlayerItemProvider(this);
		}

		return playerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Bracket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BracketItemProvider bracketItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Bracket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBracketAdapter() {
		if (bracketItemProvider == null) {
			bracketItemProvider = new BracketItemProvider(this);
		}

		return bracketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.League} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeagueItemProvider leagueItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.League}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeagueAdapter() {
		if (leagueItemProvider == null) {
			leagueItemProvider = new LeagueItemProvider(this);
		}

		return leagueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.RoundRobin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoundRobinItemProvider roundRobinItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.RoundRobin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoundRobinAdapter() {
		if (roundRobinItemProvider == null) {
			roundRobinItemProvider = new RoundRobinItemProvider(this);
		}

		return roundRobinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Knockout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KnockoutItemProvider knockoutItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Knockout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKnockoutAdapter() {
		if (knockoutItemProvider == null) {
			knockoutItemProvider = new KnockoutItemProvider(this);
		}

		return knockoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Standard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardItemProvider standardItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Standard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardAdapter() {
		if (standardItemProvider == null) {
			standardItemProvider = new StandardItemProvider(this);
		}

		return standardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.ExtraTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtraTimeItemProvider extraTimeItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.ExtraTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtraTimeAdapter() {
		if (extraTimeItemProvider == null) {
			extraTimeItemProvider = new ExtraTimeItemProvider(this);
		}

		return extraTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.PenaltyShootout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PenaltyShootoutItemProvider penaltyShootoutItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.PenaltyShootout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPenaltyShootoutAdapter() {
		if (penaltyShootoutItemProvider == null) {
			penaltyShootoutItemProvider = new PenaltyShootoutItemProvider(this);
		}

		return penaltyShootoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.GroupStage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupStageItemProvider groupStageItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.GroupStage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupStageAdapter() {
		if (groupStageItemProvider == null) {
			groupStageItemProvider = new GroupStageItemProvider(this);
		}

		return groupStageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Defender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefenderItemProvider defenderItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Defender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefenderAdapter() {
		if (defenderItemProvider == null) {
			defenderItemProvider = new DefenderItemProvider(this);
		}

		return defenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Goalkeeper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalkeeperItemProvider goalkeeperItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Goalkeeper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalkeeperAdapter() {
		if (goalkeeperItemProvider == null) {
			goalkeeperItemProvider = new GoalkeeperItemProvider(this);
		}

		return goalkeeperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta_domain_model.Attacker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttackerItemProvider attackerItemProvider;

	/**
	 * This creates an adapter for a {@link fta_domain_model.Attacker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttackerAdapter() {
		if (attackerItemProvider == null) {
			attackerItemProvider = new AttackerItemProvider(this);
		}

		return attackerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (teamItemProvider != null)
			teamItemProvider.dispose();
		if (tournamentItemProvider != null)
			tournamentItemProvider.dispose();
		if (matchItemProvider != null)
			matchItemProvider.dispose();
		if (playerItemProvider != null)
			playerItemProvider.dispose();
		if (bracketItemProvider != null)
			bracketItemProvider.dispose();
		if (userItemProvider != null)
			userItemProvider.dispose();
		if (leagueItemProvider != null)
			leagueItemProvider.dispose();
		if (roundRobinItemProvider != null)
			roundRobinItemProvider.dispose();
		if (knockoutItemProvider != null)
			knockoutItemProvider.dispose();
		if (standardItemProvider != null)
			standardItemProvider.dispose();
		if (extraTimeItemProvider != null)
			extraTimeItemProvider.dispose();
		if (penaltyShootoutItemProvider != null)
			penaltyShootoutItemProvider.dispose();
		if (groupStageItemProvider != null)
			groupStageItemProvider.dispose();
		if (defenderItemProvider != null)
			defenderItemProvider.dispose();
		if (goalkeeperItemProvider != null)
			goalkeeperItemProvider.dispose();
		if (attackerItemProvider != null)
			attackerItemProvider.dispose();
	}

}
